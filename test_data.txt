Below few scenarios to test the program.

Scenario 1: X and Y data validation. Only numeric value is allowed and between 0 to 4.

PLACE X,0,NORTH 
REPORT

Output: Invalid X value!

PLACE 0,Y,NORTH 
REPORT

Output: Invalid Y value!

PLACE 5,0,NORTH 
REPORT

Output: Invalid X value!

***

Scenario 2: Cardinal Direction data validation. Only accepts NORTH, EAST, SOUTH, WEST.

PLACE 0,0, 
REPORT

Output: Cardinal Direction cannot be empty!

PLACE 0,0,DIRECTION 
REPORT

Output: Invalid Cardinal Direction!

***

Scenario 3: Locate robot in valid location and direction

PLACE 0,0,WEST
REPORT

Output: 0,0,WEST

***

Scenario 4: While robot is in valid location and direction, rotate to RIGHT (robot will face EAST)
PLACE 1,1,NORTH
RIGHT
REPORT

Output: 1,1,EAST

***

Scenario 5: While robot is in valid location and direction, rotate to LEFT (robot will face WEST)
PLACE 1,1,NORTH
RIGHT
REPORT

Output: 1,1,WEST

***

Scenario 6: While robot is in valid location and direction, move in all four cardinal directions
PLACE 1,1,NORTH
MOVE
RIGHT
MOVE
RIGHT
MOVE
RIGHT
MOVE
RIGHT

Output: 
1,2,EAST
2,2,SOUTH
2,1,WEST
1,1,NORTH

***

Scenario 7: robot should not move to prevent from falling
PLACE 4,4,NORTH
MOVE
MOVE
MOVE
MOVE
MOVE

Output: Out of range!



////////


Creating a complete and fully functional test/exam system involves multiple components, and providing the entire code here may be extensive. However, I can guide you on how to structure the code using SharePoint and JavaScript. Please note that this example assumes you are using SharePoint lists for storing questions and user results.

**1. Set up SharePoint Lists:**
   - Create three lists: one for user details, one for questions, and one for storing user results.
   - Include columns like `UserID`, `UserName`, `TestLanguage`, `QuestionText`, `OptionA`, `OptionB`, `OptionC`, `CorrectOption`, etc.

**2. JavaScript Code:**

```javascript
// Assume you have jQuery loaded in your SharePoint environment

$(document).ready(function () {
  // Check if user has already taken the test
  checkIfUserTakenTest();

  // Timer for 15 minutes
  setTimeout(function () {
    submitTest();
  }, 900000); // 15 minutes

  // Submit button click event
  $('#submitBtn').on('click', function () {
    submitTest();
  });
});

function checkIfUserTakenTest() {
  // Your logic to check if the user has already taken the test
  // You might want to use SharePoint REST API to query the results list
}

function submitTest() {
  // Your logic to calculate the score
  var score = calculateScore();

  // Display pass/fail message
  var resultMessage = (score >= passingScore) ? 'Passed' : 'Failed';
  alert('You ' + resultMessage + '. Your score: ' + score);

  // Save the result to SharePoint
  saveResult(score);
}

function calculateScore() {
  // Your logic to calculate the score based on user's answers
  var score = 0;

  // Example: Loop through questions and check user's selected option
  $('input[name="question"]').each(function () {
    var selectedOption = $('input[name="question"]:checked').val();
    var correctOption = $(this).data('correctOption');

    if (selectedOption === correctOption) {
      score++;
    }
  });

  return score;
}

function saveResult(score) {
  // Your logic to save the result to SharePoint
  // Use SharePoint REST API to add a new item to the results list
}
```

**3. HTML:**

```html
<!-- Your HTML structure for the test -->
<div>
  <!-- Questions and options go here -->
  <input type="radio" name="question" value="A" data-correct-option="A"> Option A
  <input type="radio" name="question" value="B" data-correct-option="B"> Option B
  <input type="radio" name="question" value="C" data-correct-option="C"> Option C

  <!-- Submit button -->
  <button id="submitBtn">Submit Test</button>
</div>
```

This is a basic structure, and you may need to modify it based on your specific requirements and the SharePoint structure you have in place. Additionally, you should implement proper error handling, validation, and security measures based on your application's needs.






/////////
To achieve this in SharePoint using the REST API, you can leverage the `$filter` and `$orderby` query options to filter and order the results based on your criteria. Below is a sample REST API query that fetches mandatory records with a "yes" value and randomly selects the top 2 records for each category:

```javascript
var siteUrl = "https://your-sharepoint-site-url";
var listName = "YourListName";

// Construct the REST API endpoint URL
var endpointUrl = siteUrl + "/_api/web/lists/getbytitle('" + listName + "')/items?$filter=mandatory eq 'yes'&$orderby=category asc";

// Make the REST API request
$.ajax({
    url: endpointUrl,
    method: "GET",
    headers: {
        "Accept": "application/json;odata=verbose"
    },
    success: function (data) {
        // Process the data to get random top 2 for each category
        var results = processData(data.d.results);

        // Output the results
        console.log(results);
    },
    error: function (error) {
        console.log("Error: " + JSON.stringify(error));
    }
});

// Function to process the data and get random top 2 for each category
function processData(items) {
    var result = {};
    var categories = {};

    // Group items by category
    items.forEach(function (item) {
        if (!categories[item.category]) {
            categories[item.category] = [];
        }
        categories[item.category].push(item);
    });

    // Get random top 2 for each category
    for (var category in categories) {
        var randomTop2 = getRandomTop2(categories[category]);
        result[category] = randomTop2;
    }

    return result;
}

// Function to get random top 2 items from an array
function getRandomTop2(array) {
    var shuffled = array.slice(0);
    var i = array.length;
    var min = i - 2;
    var temp, index;

    while (i-- > min) {
        index = Math.floor((i + 1) * Math.random());
        temp = shuffled[index];
        shuffled[index] = shuffled[i];
        shuffled[i] = temp;
    }

    return shuffled.slice(min);
}
```

Please note the following:

1. Replace `"https://your-sharepoint-site-url"` with the actual URL of your SharePoint site.
2. Replace `"YourListName"` with the actual name of your SharePoint list.
3. Ensure that you have the appropriate permissions to access the list data.

This script makes use of the `$filter` query option to filter records where the "mandatory" column is equal to "yes" and the `$orderby` query option to sort the results by the "category" column in ascending order. The `processData` function groups items by category and selects random top 2 for each category using the `getRandomTop2` function. Finally, the processed data is logged to the console.




///

update another list
<script type="text/javascript" src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        // Override the default form submission
        $('form').submit(function (e) {
            e.preventDefault();

            // Get data from the current form (List A)
            var formData = {
                // Extract data from the form fields
                Field1: $('#Field1').val(),
                Field2: $('#Field2').val(),
                // ... add other fields as needed
            };

            // Use REST API to update List B
            $.ajax({
                url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getbytitle('ListB')/items",
                method: "POST",
                contentType: "application/json;odata=verbose",
                data: JSON.stringify(formData),
                headers: {
                    "Accept": "application/json;odata=verbose",
                    "X-RequestDigest": $("#__REQUESTDIGEST").val()
                },
                success: function (data) {
                    // Handle success
                    console.log("Item added to List B");
                },
                error: function (error) {
                    // Handle error
                    console.log("Error adding item to List B: " + JSON.stringify(error));
                }
            });
        });
    });
</script>


/////

<script type="text/javascript" src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        // Override the default form submission
        $('input[type=button]').click(function () {
            // Get data from the current form (List A)
            var formData = {
                Title: $('input[title="Title"]').val(),
                // Add other fields as needed
            };

            // Use REST API to update List B
            $.ajax({
                url: _spPageContextInfo.webAbsoluteUrl + "/_api/web/lists/getbytitle('ListB')/items",
                method: "POST",
                contentType: "application/json;odata=verbose",
                data: JSON.stringify(formData),
                headers: {
                    "Accept": "application/json;odata=verbose",
                    "X-RequestDigest": $("#__REQUESTDIGEST").val()
                },
                success: function (data) {
                    // Handle success
                    console.log("Item added to List B");
                },
                error: function (error) {
                    // Handle error
                    console.log("Error adding item to List B: " + JSON.stringify(error));
                }
            });
        });
    });
</script>



